package et.com.commomHelper;

import et.com.commomHelper.domain.Configuration;
import et.com.commomHelper.repos.MessageRepos;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.env.Environment;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Optional;

@Controller // This means that this class is a Controller
@RequestMapping(path = "/cfg") // This means URL's start with /demo (after Application path)
public class MainController {

    @Autowired
    TableService tableService;
    @Autowired
    private Environment environment;
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private MessageRepos userRepository;

    @PostMapping(path = "/add") // Map ONLY POST Requests
    public @ResponseBody
    String addNewUser(@RequestParam String key
            , @RequestParam String value) {//environment.getProperty("spring.datasource.username")
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        Configuration n = new Configuration();
        n.setKey(key);
        n.setValue(value);
        userRepository.save(n);
        return "Saved";
    }

    @GetMapping(path = "/all")
    public @ResponseBody
    Iterable<Configuration> getAllUsers() {
        // This returns a JSON or XML with the users

        return userRepository.findAll();
    }

    @GetMapping(path = "/find")
    public @ResponseBody
    Optional<Configuration> findUsers(@RequestParam String id) {
        // This returns a JSON or XML with the users
        System.out.println(environment.getProperty("spring.datasource.url"));
        return userRepository.findById(Long.valueOf(id));
    }

    @GetMapping(path = "/tn")
    public @ResponseBody
    List<String> tn(@RequestParam String schemaName) {
        // This returns a JSON or XML with the users
        System.out.println(environment.getProperty("spring.datasource.url"));
        List<String> tableNames = tableService.getTableNames(schemaName);
        tableNames.forEach(System.out::println);
        return tableNames;
    }

}